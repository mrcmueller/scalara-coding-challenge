/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BeziehungAntwortDto } from '../models/beziehung-antwort-dto';
import { beziehungenControllerAendereBeziehung } from '../fn/beziehungen/beziehungen-controller-aendere-beziehung';
import { BeziehungenControllerAendereBeziehung$Params } from '../fn/beziehungen/beziehungen-controller-aendere-beziehung';
import { beziehungenControllerBeziehung } from '../fn/beziehungen/beziehungen-controller-beziehung';
import { BeziehungenControllerBeziehung$Params } from '../fn/beziehungen/beziehungen-controller-beziehung';
import { beziehungenControllerBeziehungen } from '../fn/beziehungen/beziehungen-controller-beziehungen';
import { BeziehungenControllerBeziehungen$Params } from '../fn/beziehungen/beziehungen-controller-beziehungen';
import { beziehungenControllerErstelleBeziehung } from '../fn/beziehungen/beziehungen-controller-erstelle-beziehung';
import { BeziehungenControllerErstelleBeziehung$Params } from '../fn/beziehungen/beziehungen-controller-erstelle-beziehung';
import { beziehungenControllerLoescheBeziehung } from '../fn/beziehungen/beziehungen-controller-loesche-beziehung';
import { BeziehungenControllerLoescheBeziehung$Params } from '../fn/beziehungen/beziehungen-controller-loesche-beziehung';

@Injectable({ providedIn: 'root' })
export class BeziehungenService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `beziehungenControllerBeziehungen()` */
  static readonly BeziehungenControllerBeziehungenPath = '/beziehungen';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `beziehungenControllerBeziehungen()` instead.
   *
   * This method doesn't expect any request body.
   */
  beziehungenControllerBeziehungen$Response(
    params?: BeziehungenControllerBeziehungen$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<Array<BeziehungAntwortDto>>> {
    return beziehungenControllerBeziehungen(
      this.http,
      this.rootUrl,
      params,
      context,
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `beziehungenControllerBeziehungen$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  beziehungenControllerBeziehungen(
    params?: BeziehungenControllerBeziehungen$Params,
    context?: HttpContext,
  ): Observable<Array<BeziehungAntwortDto>> {
    return this.beziehungenControllerBeziehungen$Response(params, context).pipe(
      map(
        (
          r: StrictHttpResponse<Array<BeziehungAntwortDto>>,
        ): Array<BeziehungAntwortDto> => r.body,
      ),
    );
  }

  /** Path part for operation `beziehungenControllerErstelleBeziehung()` */
  static readonly BeziehungenControllerErstelleBeziehungPath = '/beziehungen';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `beziehungenControllerErstelleBeziehung()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  beziehungenControllerErstelleBeziehung$Response(
    params: BeziehungenControllerErstelleBeziehung$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<BeziehungAntwortDto>> {
    return beziehungenControllerErstelleBeziehung(
      this.http,
      this.rootUrl,
      params,
      context,
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `beziehungenControllerErstelleBeziehung$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  beziehungenControllerErstelleBeziehung(
    params: BeziehungenControllerErstelleBeziehung$Params,
    context?: HttpContext,
  ): Observable<BeziehungAntwortDto> {
    return this.beziehungenControllerErstelleBeziehung$Response(
      params,
      context,
    ).pipe(
      map(
        (r: StrictHttpResponse<BeziehungAntwortDto>): BeziehungAntwortDto =>
          r.body,
      ),
    );
  }

  /** Path part for operation `beziehungenControllerBeziehung()` */
  static readonly BeziehungenControllerBeziehungPath = '/beziehungen/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `beziehungenControllerBeziehung()` instead.
   *
   * This method doesn't expect any request body.
   */
  beziehungenControllerBeziehung$Response(
    params: BeziehungenControllerBeziehung$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<BeziehungAntwortDto>> {
    return beziehungenControllerBeziehung(
      this.http,
      this.rootUrl,
      params,
      context,
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `beziehungenControllerBeziehung$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  beziehungenControllerBeziehung(
    params: BeziehungenControllerBeziehung$Params,
    context?: HttpContext,
  ): Observable<BeziehungAntwortDto> {
    return this.beziehungenControllerBeziehung$Response(params, context).pipe(
      map(
        (r: StrictHttpResponse<BeziehungAntwortDto>): BeziehungAntwortDto =>
          r.body,
      ),
    );
  }

  /** Path part for operation `beziehungenControllerLoescheBeziehung()` */
  static readonly BeziehungenControllerLoescheBeziehungPath =
    '/beziehungen/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `beziehungenControllerLoescheBeziehung()` instead.
   *
   * This method doesn't expect any request body.
   */
  beziehungenControllerLoescheBeziehung$Response(
    params: BeziehungenControllerLoescheBeziehung$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<BeziehungAntwortDto>> {
    return beziehungenControllerLoescheBeziehung(
      this.http,
      this.rootUrl,
      params,
      context,
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `beziehungenControllerLoescheBeziehung$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  beziehungenControllerLoescheBeziehung(
    params: BeziehungenControllerLoescheBeziehung$Params,
    context?: HttpContext,
  ): Observable<BeziehungAntwortDto> {
    return this.beziehungenControllerLoescheBeziehung$Response(
      params,
      context,
    ).pipe(
      map(
        (r: StrictHttpResponse<BeziehungAntwortDto>): BeziehungAntwortDto =>
          r.body,
      ),
    );
  }

  /** Path part for operation `beziehungenControllerAendereBeziehung()` */
  static readonly BeziehungenControllerAendereBeziehungPath =
    '/beziehungen/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `beziehungenControllerAendereBeziehung()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  beziehungenControllerAendereBeziehung$Response(
    params: BeziehungenControllerAendereBeziehung$Params,
    context?: HttpContext,
  ): Observable<StrictHttpResponse<BeziehungAntwortDto>> {
    return beziehungenControllerAendereBeziehung(
      this.http,
      this.rootUrl,
      params,
      context,
    );
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `beziehungenControllerAendereBeziehung$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  beziehungenControllerAendereBeziehung(
    params: BeziehungenControllerAendereBeziehung$Params,
    context?: HttpContext,
  ): Observable<BeziehungAntwortDto> {
    return this.beziehungenControllerAendereBeziehung$Response(
      params,
      context,
    ).pipe(
      map(
        (r: StrictHttpResponse<BeziehungAntwortDto>): BeziehungAntwortDto =>
          r.body,
      ),
    );
  }
}
